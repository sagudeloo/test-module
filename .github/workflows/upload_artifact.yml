# This is a basic workflow to help you get started with Actions

name: Build Modules

permissions: 
  contents: write

# Controls when the workflow will run
on:

  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  diff:
    runs-on: ubuntu-latest
    
    outputs:
      MODULES: ${{steps.changed-files.outputs.all_changed_and_modified_files}}

    steps:
      
      - uses: tj-actions/changed-files@v44
        id: changed-files
        with:
          dir_names: true
          matrix: true
          files: |
            **/changelog.yml
            **/changelog.yaml
          files_ignore: |
            .github/**
            .gitignore
            **.md

      - name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_and_modified_files }}
        run: |
          echo "Directories"
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
          done
          echo "Modules"
          for file in ${ALL_CHANGED_FILES}; do
            echo "$(basename $file) module"
          done
          echo "Process finished"

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    needs: diff

    # Steps represent a sequence of tasks that will be executed as part of the job

    strategy:
      matrix:
        modules: ${{ fromJSON(needs.diff.outputs.MODULES) }}

    steps:
      - uses: actions/checkout@v4

      - name: Read changelog file
        uses: pietrobolcato/action-read-yaml@1.1.0
        id: read_changelog
        with:
          config: ${{ matrix.modules }}/changelog.yaml

      - name: check
        run: 
          echo "${{ steps.read_changelog.outputs['name'] }}\n"
          echo "${{ steps.read_changelog.outputs['version'] }}"

      - uses: vimtor/action-zip@v1.2
        with:
          files: ${{matrix.modules}}/
          dest: ${{steps.read_changelog.outputs['name']}}.zip

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{steps.read_changelog.outputs['name']}}-${{steps.read_changelog.outputs['version']}}
          release_name: Release ${{steps.read_changelog.outputs['name']}} ${{steps.read_changelog.outputs['version']}}
          body: |
            steps.read_changelog.outputs['changelog.${{steps.read_changelog.outputs['version']}}']
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{steps.read_changelog.outputs['name']}}.zip
          asset_name: ${{steps.read_changelog.outputs['name']}}.zip
          asset_content_type: application/zip

          
